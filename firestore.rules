rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidTakeText(text) {
      return text is string && 
             text.size() >= 10 && 
             text.size() <= 150; // Concise hot takes
    }
    
    function isValidCategory(category) {
      return category is string && 
             category.size() >= 2 && 
             category.size() <= 50;
    }
    
    // Takes collection
    match /takes/{takeId} {
      // Anyone can read approved takes, or users can read their own takes
      allow read: if resource.data.isApproved == true || 
                     isOwner(resource.data.userId);
      
      // Authenticated users can create takes (auto-approved for development)
      allow create: if isAuthenticated() &&
                   isValidTakeText(request.resource.data.text) &&
                   isValidCategory(request.resource.data.category) &&
                   request.resource.data.userId == request.auth.uid &&
                   // Allow both approved and pending takes for development
                   request.resource.data.isApproved in [true, false] &&
                   request.resource.data.status in ['approved', 'pending'] &&
                   request.resource.data.hotVotes == 0 &&
                   request.resource.data.notVotes == 0 &&
                   request.resource.data.totalVotes == 0 &&
                   request.resource.data.reportCount == 0;
      
      // Only system/admin can update takes (for vote counts and approval)
      // In a real app, you'd have admin permissions here
      // For now, we'll allow updates to vote counts
      allow update: if isAuthenticated() &&
                   // Only allow updating vote counts
                   (request.resource.data.diff(resource.data).affectedKeys()
                    .hasOnly(['hotVotes', 'notVotes', 'totalVotes', 'reportCount']));
      
      // Users can delete their own takes
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Votes collection
    match /votes/{voteId} {
      // Users can read their own votes
      // Also allow any authenticated user to read for aggregate queries
      allow read: if isAuthenticated();
      
      // Users can create votes
      allow create: if isAuthenticated() &&
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.vote in ['hot', 'not'] &&
                   request.resource.data.takeId is string &&
                   request.resource.data.votedAt is timestamp;
      
      // Users can delete their own votes (for vote changes)
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
      
      // No updates allowed for votes (votes are immutable except for deletion)
      allow update: if false;
    }
    
    // Skips collection
    match /skips/{skipId} {
      // Allow reading all skips for leaderboard calculations
      allow read: if isAuthenticated();
      
      // Users can create skips
      allow create: if isAuthenticated() &&
                   request.resource.data.userId == request.auth.uid &&
                   request.resource.data.takeId is string &&
                   request.resource.data.skippedAt is timestamp;
      
      // No updates or deletes allowed for skips
      allow update, delete: if false;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own data
      allow read: if isOwner(userId);
      
      // Users can create their own user document (more permissive for now)
      allow create: if isOwner(userId);
      
      // Users can update their own data (more permissive for now)
      allow update: if isOwner(userId);
      
      // No deletes allowed
      allow delete: if false;
      
      // Votes subcollection (existing pattern)
      match /votes/{voteId} {
        allow read, write: if isOwner(userId);
      }
      
      // Favorites subcollection
      match /favorites/{favoriteId} {
        // Users can read, create, and delete their own favorites
        allow read, create, delete: if isOwner(userId);
        
        // No updates needed for favorites (just add/remove)
        allow update: if false;
      }
    }
    
    // Deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}